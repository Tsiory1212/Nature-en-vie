{% extends 'base_admin.html.twig' %}

{% block title %} Toutes les commandes {% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin="" />
	<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
	<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
	<style>
		.map{
			height: 100vh;
		}
		
		@media only screen and (min-width: 1100px) {
			.container-list{
				display: grid;
				grid-template-columns: 2fr 2fr;
			}
			
			.list{
				padding: 0 30px;
				height: 1900px;
				width: 800px;
			}

			.map{
				background-color: #CCCCCC;
				position: sticky!important;
				top: 0;
				right: 0;
				left: 0;
			}
		}

		.item:hover{
			background-color: #0fabb94b;
		}


		.marker.leaflet-popup{
			margin-bottom: 16px;
			cursor: pointer;
			font-size: 16px;
			font-weight: bold;
			padding: 5px 10px;
			text-align: center;
			box-shadow: 0 0 10px rgba(0, 0, 0, 3) ;
			background-color: #fff;
		}
		.marker.leaflet-popup .user{
			color: #0fabb9;
		}

		.marker.leaflet-popup::after{
			content: '';
			position: absolute;
			top: 100%;
			left: 50%;
			width: 0;
			height: 0;
			margin-left: -8px;
			border-left: 8px solid transparent;
			border-right: 8px solid transparent;
			border-top: 8px solid #fff;
		}

		.marker .leaflet-popup-content-wrapper{
			background: transparent;
			color: inherit;
			box-shadow: none;
			text-align: inherit;
		} 

		.marker .leaflet-popup-content{
			text-align: inherit;
			color: inherit;
			margin: 0;
		} 

		.marker .leaflet-popup-tip-container{
			display: none;
		} 

		.marker.is-active, .marker:hover{
			z-index: 300;
				background-color: #0fabb9;
			color: #fff;
		}
		.marker.is-active::after, .marker:hover::after{
			border-top-color: #0fabb9;
		}

		.marker.is-expanded{
			background-color: #fff!important;
			color: inherit!important;
			z-index: 301;
			text-align: left;
		}
		.marker.is-expanded::after{
			border-top-color: #fff!important;
		}
	</style>
{% endblock %}

{% block body %}
	<div class="my-5" >
		<h1 class="text-white text-center font-bg-stylized-1">Liste des commandes" </h1>
		<div class="bg-glass2 p-3 mb-5">
			<div class="row">
				<div class="col-4">
					<button class="button butotn1" onclick="largeMap()">Grand</button>
					<button class="button butotn1" onclick="drawShortestPath()">Chemin court</button>
				</div>
				<div class="col-8">
					<div class="form-pathLine d-inine ">
						<select id="js_pathLine"> </select>
						<button id="btn-submit-pathLine" class="button button1">Trier</button>
					</div>
				</div>
			</div>
			<div class="container-list">
				<div class="list">
					<table class="table">
						<thead>
							<tr>
							<th scope="col">Ordre</th>
							<th scope="col">Nom</th>
							<th scope="col">Prénom</th>
							<th scope="col">Adresse</th>
							<th scope="col">Code Postal</th>
							<th scope="col">Téléphone</th>
							<th scope="col"></th>
							</tr>
						</thead>
						<tbody>
							{% for user in users %}
							{% set ordersNotDelivred = 0 %}
							{% for order in user.orders %}
								{% if order.status == 0 %}
									{% set ordersNotDelivred = ordersNotDelivred + 1 %}
								{% endif %}
							{% endfor %}
							<tr 
								class="item js-marker" 

								data-order="{{ ordersNotDelivred}}" 
								data-lat="{{user.delivry.latPosition}}" 
								data-lng="{{user.delivry.lngPosition}}"
								data-address="{{user.delivry.address}}"
								data-postalcode="{{user.delivry.postalCode}}"
								data-user="{{user.firstname}}"
							>
								<td>{{ loop.index}}</td>
								<td>{{ user.lastname }}</td>
								<td>{{ user.firstname }}</td>
								<td>{{ user.delivry.address }}</td>
								<td>{{ user.delivry.postalCode }}</td>
								<td>{{ user.phone }}</td>
								<td><a href="{{path('admin_user_order', {user: user.id})}}"><i class="fa-solid fa-user"></i></a></td>
							</tr>
						
						{% endfor %}

						</tbody>
					</table>
				</div>
				<div class="map" id="map"></div>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
	<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
	<script src="https://unpkg.com/leaflet-control-geocoder@2.4.0/dist/Control.Geocoder.js"></script>
  	<script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
	<script>
		// window.onload = () => {
			let position_me = ["46.573795318603516", "3.2033939361572266"];
			let waypoints = [position_me];
			let waypointsRouting = {};
			waypointsRouting['wp'+0] = new L.Routing.Waypoint(L.latLng(position_me));

			// let waypointsRouting = [ 
			// 	 new L.Routing.Waypoint(L.latLng(position_me)) 
			// ];
			let	map = L.map('map').setView(position_me, 11);
			map.scrollWheelZoom.disable();
			let popupCollection = [];

			L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
				attribution: 'Map data &copy; <a href="https://osm.org/copyright">OpenStreetMap</a> ODbL - rendu <a href="https://www.openstreetmap.fr/">OSM France</a>',
				minZoom: 1,
				maxZoom: 20
			}).addTo(map);

			// On dessine les limites de zone
			$.ajax({
				type: 'get',
				url: `/assets/js/france-geoJson2.json`,
				success :  function(geojson){
					let geoJsonLayer = L.geoJSON(geojson, {
						style: {
								"color": "#839c49",
								"opacity": 1,
								"fillColor": "#839c49",
								"fillOpacity": 0.5,
								"bubblingMouseEvents": false // permet de dire que la tuille carte et Polygone n'a pas le même evenement de souri
						}
					}).addTo(map);
					geoJSON = L.geoJSON(geojson)
				}
			})
			var js_marker = $('.js-marker');
				$.each(js_marker, function( index, item ) {
					let point = [item.dataset.lat, item.dataset.lng];
					
					// On affiche le popup, seulement si l'utilisateur a au moin une commande
					if (item.dataset.order > 0) {
						waypoints.push(point);
						map.fitBounds(waypoints);
						waypointsRouting['wp'+(index+1)] = new L.Routing.Waypoint(L.latLng(point));

						// waypointsRouting.push(
						// 	new L.Routing.Waypoint(L.latLng(point))
						// );
					}	
				});

	

			let routeUs = L.Routing.osrmv1(
				{
					// serviceUrl: 'http://router.project-osrm.org/route/v1',
					language: 'fr',
					profile: 'car',
				}
			);

			var startingPoint = '';
			var shortestDistance = 100000000000000;
			var bestRoute = 0;
			var _routesUs = [];
			var waypointsBefore = waypointsRouting;
			var waypointsAfter = [waypointsRouting.wp0];
			const distancesRoute = {};

			const bestWp = new Map();

			// while (Object.keys(waypointsBefore).length > 1) {
				// if (startingPoint == '') {
				// 	startingPoint = waypointsRouting.wp0;
				// }

				Object.entries(waypointsRouting).forEach(([key, waypoint]) => {
				// for (const [key, waypoint] of Object.entries(waypointsRouting)) {
					let i = 1;

					if (startingPoint == '') {
						startingPoint = waypointsRouting.wp0;
					}
					if (key == 'wp0') {
						// On ignore le premier waypoint, car il représente déjà un point de départ
					} else {
						
						routeUs.route(
							[startingPoint, waypoint], 
							function (err, routes) {
								if(!err)
								{
									for(let r in routes)
									{	
										if (routes[r].summary.totalDistance < shortestDistance) {
											distancesRoute[key] = routes[r].summary.totalDistance;
											_routesUs[`wp0 - ${key}`] = routes;
											delete waypointsBefore[key];
											waypointsAfter[key] = waypoint;
											shortestDistance = routes[r].summary.totalDistance;
											
											bestWp.set(key, waypoint) ;
										}	
									}
								}
							}
						)
					}	
				})

			

			// }
			console.log('bestWp', bestWp)
			console.log('_routesUs', _routesUs)
			console.log('Bestdistance', distancesRoute)
			
	// }		
	</script>

	<script>

	// // A NE PAS SUPPRIMER : console.log
	// // console.log('best route',routes[bestRoute]);
		function drawShortestPath() {
			console.log('waypointsBefore', waypointsBefore);
			console.log('waypointsAfter', waypointsAfter);
			console.log('waypointsRouting', waypointsRouting);


			var control2 = L.Routing.control({
				geocoder: L.Control.Geocoder.nominatim(),
				waypoints: waypointsAfter,
				show: false,
				altLineOptions: {
					styles: [{
						opacity: 1,
						weight: 1
					}]
				},
				router: new L.Routing.osrmv1({
					language: 'fr',
					profile: 'car'
				}),
				createMarker: function(i, wp, nWps) {
					switch (i) {
						case 0:
							return L.marker(wp.latLng, {
								draggable: false
							}).bindPopup("<b> Point de départ</b>").openPopup();
						case nWps - 1:
							return L.marker(wp.latLng, {
								icon: svgpin_Icon2,
								draggable: false
							}).bindPopup(`<b> Point d'arrivée </b>`).openPopup();
						default:
							return L.marker(wp.latLng, {
								draggable: false
							}).bindPopup(`Arrêt n°${i}`).openPopup();
					}
				}
			});
			control2.addTo(map);

			// Permet de cacher les popups
			popupCollection.forEach(popup => {
				popup.remove()
			});
		


			// L.Routing.line(_routesUs[bestRoute],{
			// 	styles : [
			// 		{
			// 			color : 'black',
			// 			weight : '10'
			// 		}
			// 	]
			// })
			// .addTo(map);
		}




		function largeMap() {
			if ($('#map').css('width') == "529px") {
					$('#map').css('width', '156vh');
			} else {
					$('#map').css('width', '529px');
			}
		}



	</script>

{% endblock %}