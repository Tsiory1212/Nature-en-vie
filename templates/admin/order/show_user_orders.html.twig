{% extends 'base_admin.html.twig' %}

{% block title %} Historique des commandes {% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin="" />
	<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
	<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
	<style>
		.map{
			height: 100vh;
		}
		.leaflet-routing-add-waypoint{
			display: none!important;
		}
		
		@media only screen and (min-width: 1100px) {

			.content-order-info::before{
				content: none!important;
			}

			.map{
				background-color: #CCCCCC;
				position: sticky!important;
				top: 0;
				right: 0;
				left: 0;
			}
		}
	</style>
{% endblock %}

{% block body %}
<div class="container my-5">
	<h1 class="text-white text-center font-bg-stylized-1">Liste des commande du client "{{ user.lastname }}" </h1>
	<a href="{{ path('admin_order_list') }}" class="button button1">Retour</a>
	<button onclick="getMyLocation();" class="button button1"><i class="fa-solid fa-location-dot"></i> Ma position</button>
	<div class="container bg-glass2 content-order-info p-3 mb-5">
	<div class="row">
		<div class="col-8">
		<table class="table">
			<thead class="text-center">
			<tr>
				<th scope="col">Prix</th>
				<th scope="col">Type de livraision</th>
				<th scope="col">Date de commande</th>
				<th scope="col">Panier</th>
				<th scope="col">Type</th>
				<th scope="col">Livré</th>
			</tr>
			</thead>
			<tbody>
			{% for order in ordersNotDelivred %}
				<tr class="item h5"
					data-address="{{user.delivry.address}}"
					data-lat="{{user.delivry.latPosition}}"
					data-lng="{{user.delivry.lngPosition}}"
					data-postalcode="{{user.delivry.postalCode}}"
				>
					<td>{{ order.totalPrice }} €</td>
					<td>{{ user.delivry.delivryType  }}</td>
					<td>{{ order.createdAt|date() }}</td>
					<td> <a href="{{path('admin_user_order_cart_show', {order: order.id}) }}">Consulter</a> </td>
					<td> {{ order.paymentType}} </td>
					<td>
						{% if order.statusDelivry == 0 %}
						<a href="{{ path('admin_user_order_deliver', {user: user.id, order: order.id}) }}"><i class="fas fa-spinner"></i></a>
						{% else %}
						<i class="fas fa-check"></i>
						{% endif %}
					</td>
				</tr>
			{% endfor %}
			</tbody>
		</table>
		</div>
		<div class="col-4">
		<div class="map" id="map"></div>
		</div>
	</div>
	</div>
</div>

{% endblock %}

{% block javascripts %}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
  <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>

  <script>
	window.onload = () => {

		let position_cli = [{{ user.delivry.latPosition }}, {{ user.delivry.lngPosition }}];
		let position_me = [46.573795318603516, 3.2033939361572266];
		let pointBounds = [];
		let	map = L.map('map').setView(position_cli, 11);
		
		L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
		attribution: 'Map data &copy; <a href="https://osm.org/copyright">OpenStreetMap</a> ODbL - rendu <a href="https://www.openstreetmap.fr/">OSM France</a>',
		minZoom: 1,
		maxZoom: 20
		}).addTo(map);

		$.ajax({
			type: 'get',
			url: `/assets/js/france-geoJson2.json`,
			success :  function(geojson){
				let geoJsonLayer = L.geoJSON(geojson, {
					style: {
							"color": "#839c49",
							"opacity": 1,
							"fillColor": "#839c49",
							"fillOpacity": 0.5,
							"bubblingMouseEvents": false // permet de dire que la tuille carte et Polygone n'a pas le même evenement de souri
					}
				}).addTo(map);
				geoJSON = L.geoJSON(geojson)
			}
		})

		pointBounds.push(position_me, position_cli);
		map.fitBounds(pointBounds);

		let _item = $('table tbody tr.item')[0];
	
		const svgpin_Icon2 = L.icon({
			iconUrl: "/assets/images/map-location-icon-red.png",
			iconSize: [24, 24],
			iconAnchor: [12, 24],
			popupAnchor: [0, -22]
		});

		// On déclanche la fonction qui permet d'afficher dans la recherche,le "Départ" et la "Destination"
		var control;
		control = L.Routing.control({
			waypoints: [
				L.latLng(position_me),
				L.latLng(_item.dataset.lat, _item.dataset.lng)
			],
			geocoder: L.Control.Geocoder.nominatim(),
			LineOptions: {
				styles: [{
					opacity: 1,
					weight: 100
				}]
			},
			routeWhileDragging: true,
			showAlternatives: false,    
			show: false,
			router: new L.Routing.osrmv1({
				language: 'fr'
			}),
			createMarker: function(i, wp, nWps) {
				switch (i) {
					case 0:
						return L.marker(wp.latLng, {
							icon: svgpin_Icon2,
							draggable: true
						}).bindPopup("<b>" + "Départ" + "</b>");
					case nWps - 1:
						return L.marker(wp.latLng, {
							draggable: false
						}).bindPopup(`<b> Destination</b>  <h4>${_item.dataset.address} <br> Code postal : ${_item.dataset.postalcode} <h4>`).openPopup();
					// default:
					// 	return L.marker(wp.latLng, {
					// 		draggable: true
					// 	}).bindPopup("<b>" + "Waypoint" + "</b>");
				}
			}
		}).addTo(map);


		// On gère le boutton qui permet de definir le point de départ
		map.on('click', function(e) {
			var container = L.DomUtil.create('div'),
				startBtn = createButton('Commencez à partir de cet endroit', container)
			;

			L.popup()
				.setContent(container)
				.setLatLng(e.latlng)
				.openOn(map);

			L.DomEvent.on(startBtn, 'click', function() {
				control.spliceWaypoints(0, 1, e.latlng);
				map.closePopup();
			});
		});

		function createButton(label, container) {
			var btn = L.DomUtil.create('text', '', container);
			btn.setAttribute('type', 'button');
			btn.innerHTML = label;
			return btn;
		}

		// Permet de recentrer sur ma position et tracer l'itinéraire
		function getMyLocation() {
			map.locate({setView: true, enableHighAccuracy: true, maxZoom: 15})
				.on('locationfound', function(e){
					
					control.spliceWaypoints(0, 1, e.latlng);
					map.closePopup();
					marqueur = L.marker(e.latlng);
					marqueur.bindPopup("Je suis ici !");
					marqueur.addTo(map);
				});
		}
	}

  </script>
{% endblock %}

