{% extends 'base.html.twig' %}

{% block title %}
    Stripe étape 3
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('/assets/css/order_stepper.css') }}">
    <style>
        #paypal-button-recurring {
            position: relative;
            width: 400px;
            height: 50px;
            box-sizing: border-box;
            border: none;
            vertical-align: top;
            cursor: pointer;
            overflow: hidden;
            display: inline-block;
            text-align: center;
            background-color: #ffc439;
            color: #2C2E2F;

            top: 50%;
            transform: translateY(-50%);
        }

        #stripe_interval_unit{
            width: 50%;
            color: black;
            border-radius: 1rem;
            text-align: center;
            font-weight: bold;
        }
    </style>
{% endblock %}


{% block body %}
<body class="biolife-body">
	<div class="page-contain">
        <!-- Image bannière  -->
        <div class="banner-media-layout-01"></div>

        <div class="text-content3">   
            {% include "partials/_order_stepper_progress_bar.html.twig" %}

            <div class="container bg-glass2 my-5">
                <div class="d-flex text-white justify-content-center my-3">
                    <h1 class="font-bg-stylized-1">3- Paiement</h1>
                </div>

                <!-- Etape 3 : Plage horraire  -->
                <div class="block-stepper-global-content mb-3">
                    <!-- 1. Payement unique -->
                    <div class="block-stepper-content shadow-lg  mt-5 p-5 bg-white ">
                        <h1 class="text-center">Payement unique</h1>
                            <div class="container">
                                <div class="row d-flex justify-content-center">
                                    <div class="col-md-6 text-center mt-4">
                                        <form   method="post" id="single-payment-form">
                                            <div id="card-elements"></div>
                                
                                            <div id="card-errors" role="alert"></div>
                                            <button id="card-button-submit" class="button button1 mt-4">Acheter {{ cartItems_subcriberEvent['totalPrice'] }}€</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <h2 class="text-center text-white fw-bolder">Ou</h2>

                    <div class="block-stepper-content shadow-lg  mt-4 p-5 bg-white ">
                    <!-- 2. Payement reccurent -->
                        <h1 class="text-center">Payement reccurent</h1>
                        <div class="d-flex justify-content-center">
                            <!-- <label for="reccurent_stripe">Engagement : </label> -->
                            <!-- <select name="reccurent_stripe" id="reccurent_stripe">
                                <option value="0" selected="selected" class="d-none"></option>
                                {% for  i in 1..12 %}
                                    <option value="{{i}}">{{i}} semaine(s)</option>
                                {% endfor %}
                            </select> -->
                            <label for="stripe_interval_unit" class="mb-2">Choisissez le votre abonnement </label><br>
                            <select name="stripe_interval_unit" id="stripe_interval_unit">
                                <option value="week" selected="selected">Semaine</option>
                                <option value="month">Mois</option>
                                <option value="year">An</option>
                            </select>
                        </div>
                        
                        <div class="d-flex justify-content-center">
                            <form id="subscription-payment-form">
                                {# <div id="card-element">
                                  <!-- Elements will create input elements here -->
                                </div> #}
                            
                                <!-- We'll put the error messages in this element -->
                                <!-- <div id="card-element-errors" role="alert"></div> -->
                                <button id="sub-card-button-submit" class="button button1 mt-4" type="submit"><span id="label_subscribe">Abonnement</span>  {{ cartItems_subcriberEvent['totalPrice'] }}€/ <span id="label_interval_unit">Semaine</span> </button>
                            </form>
                        
                        </div>
                        

                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
{% endblock %}

{% block javascripts %}

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        $(function() {
            // Déclaration des variables
            {% if stripe_environement == 'test' %}
                var stripeToken = "{{ stripe_publishable_key_test }}"
            {% else %}
                var stripeToken = "{{ stripe_publishable_key_live }}"
            {% endif %}

            var  stripe = Stripe(stripeToken);
            var elements = stripe.elements();
            var clientSecret = "{{ intentSecret }}";
            var cardHolderName = "{{ app.user.lastname }}";
            var cardHolderEmail = "{{ app.user.email }}";
            var totalPrice = "{{ cartItems_subcriberEvent['totalPrice'] }}";
            var CardHolderPostalCcode = "{{ app.user.delivry.postalCode }}";
            var displayError = $('#card-errors');

            var styleCustom ={
                base: {
                    fontSize: '16px',
                    fontWeight: '500',
                    fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',
                    color: '#2532d'
                },
                invalid: {
                    iconColor: '#FFC7EE',
                    color: '#FFC7EE',
                }
            }

            // Monter notre form à l'objet Stripe 
            var card = elements.create('card', {style: styleCustom});
            card.update({value: {postalCode: CardHolderPostalCcode}});

            card.mount("#card-elements");

            // Message Error 
            card.on('change', function(event) {

                if (event.error) {
                    displayError.addClass('alert alert-danger');
                    displayError.text(event.error.message);

                } else {
                    displayError.removeClass('alert alert-danger');
                    displayError.text('')
                }
            })

            var cardButton = $('#card-button-submit');
            var form = $('#single-payment-form');
            form.on('submit', function(event){
                event.preventDefault();
                cardButton.html('<div class="spinner-border text-success" role="status"><span class="visually-hidden">Loading...</span></div>');
                cardButton.attr('disabled', true);


                stripe.handleCardPayment(
                    clientSecret,
                    card,
                    {
                        payment_method_data: {
                            billing_details: {
                                name : cardHolderName,
                                email : cardHolderEmail
                            }
                        }
                    }
                ).then((result) => {
                    if (result.error) {
                        displayError.addClass('alert alert-danger');
                        displayError.text(result.error.message);
                        cardButton.text('Acheter '+totalPrice+'€');
                        cardButton.attr('disabled', false);

                    }else if('paymentIntent' in result){
                        cardButton.attr('disabled', true);

                        var urlAjax = "{{ path('account_stripe_payment') }}"
                        $.ajax({
                            type: "POST",
                            url: urlAjax, 
                            data: result.paymentIntent,
                            success: function(responseAjax){
                                successUrl = "{{ path('dashboard') }}";
                                console.log('Ajax ', responseAjax);
                                console.log('Result ', result);
            
                                document.location.href = successUrl;
                            }
                        })
        

                    }
                })  
            }) 






            //payment Recurrent
            var sub_cardButton = $('#sub-card-button-submit');
            var formSub = $('#subscription-payment-form');
            formSub.on('submit', function(event){
                event.preventDefault();
                sub_cardButton.html('<div class="spinner-border text-success" role="status"><span class="visually-hidden">Loading...</span></div>');
                sub_cardButton.attr('disabled', true);


                stripe.handleCardPayment(
                    clientSecret,
                    card,
                    {
                        payment_method_data: {
                            billing_details: {
                                name : cardHolderName,
                                email : cardHolderEmail
                            }
                        }
                    }
                ).then((result) => {
                    if (result.error) {
                        displayError.addClass('alert alert-danger');
                        displayError.text(result.error.message);
                        console.log(sub_cardButton);
                        sub_cardButton.text('Abonnement '+totalPrice+'€/ '+getIntervalValueFrench($('#stripe_interval_unit').val()));
                        sub_cardButton.attr('disabled', false);

                    }else if('paymentIntent' in result){
                        sub_cardButton.attr('disabled', true);

                        createPaymentMethod(card);
        

                    }
                })  
            }) 

            
            var period = 1;
            var interval_unit = 'week';
            var  iteration = 1;
            $('#reccurent_stripe').change(function(){ 
                var value = $(this).val();
                iteration = value;
                return iteration;
            });

            $('#stripe_interval_unit').change(function(){ 
                var value = $(this).val();
                interval_unit = value;
                $('#label_interval_unit').text(getIntervalValueFrench(value));
                return interval_unit;
            });
            
            function getIntervalValueFrench(englishValue) {
                switch (englishValue) {
                    case 'week':
                        return 'Semaine'
                        break;
                    case 'month':
                        return 'Mois'
                        break;
                    case 'year':
                        return 'An'
                        break;              
                }
            }

            function createPaymentMethod(cardElement) {
                return stripe
                    .createPaymentMethod({
                        type: 'card',
                        card: cardElement,
                    })
                    .then((result) => {
                        if (result.error) {
                            displayError(error);
                        } else {
                            createSubscription({
                                paymentMethodId: result.paymentMethod.id
                            });
                        }
                    });
            }



            function createSubscription({paymentMethodId}) {
                var data = {
                    "price": totalPrice,
                    "interval_unit" : interval_unit,
                    "iteration": iteration,
                    "paymentMethodId": paymentMethodId
                };
                var urlSubscription = "{{ path('account_stripe_subscription') }}";
                return (
                    // $.ajax({
                    //     type: 'POST',
                    //     async: false,
                    //     url: urlSubscription,
                    //     data: data,
                    //     dataType  : 'json',
                    //     headers: { 
                    //         'Content-type': 'application/json',
                    //         'Accept': 'application/json'
                    //     },
                    //     success :  function(result){
                    //         console.log('response', response);
                    //         return response.json();
                    //     },
                    //     error: function(error){
                    //         console.log('error', error)
                            
                    //         sub_cardButton.text('Subscribe');
                    //         sub_cardButton.attr('disabled', false);
                    //         displayError.addClass('alert alert-danger');
                    //         displayError.text('Une erreur s\'est survenue');
                    //     }
                    // })

                    fetch(urlSubscription, {
                        method: 'post',
                        headers: {
                            'Content-type': 'application/json',
                        },
                        data: data,
                        body: JSON.stringify({
                            data
                        }),
                    })
                    .then((response) => {
                        successUrl = "{{ path('dashboard') }}";
                        return document.location.href = successUrl;
                        // return response.json();
                    })
                    // If the card is declined, display an error to the user.
                    .then((result) => {
                        if (result.error) {
                            // The card had an error when trying to attach it to a customer.
                            throw result;
                        }
                        console.log('result', result);

                        return result;
                    })
                    // Normalize the result to contain the object returned by Stripe.
                    // Add the additional details we need.
                    .then((result2) => {
                        console.log('result2', result2);

                        return {
                            paymentMethodId: paymentMethodId,
                            priceId: priceId,
                            subscription: result2,
                        };
                    })
                    // // Some payment methods require a customer to be on session
                    // // to complete the payment process. Check the status of the
                    // // payment intent to handle these actions.
                    // .then(handlePaymentThatRequiresCustomerAction)
                    // // If attaching this card to a Customer object succeeds,
                    // // but attempts to charge the customer fail, you
                    // // get a requires_payment_method error.
                    // .then(handleRequiresPaymentMethod)
                    // // No more actions required. Provision your service for the user.
                    // .then(onSubscriptionComplete)
                    .catch((error) => {
                        // An error has happened. Display the failure to the user here.
                        // We utilize the HTML element we created.
                        // showCardError(error);
                    })
                );
            }
        });


    </script>
{% endblock %}