<?php
namespace App\Service\Paypal;

use Exception;

class PaypalService  
{
    public $clientId;
    public $secret;
    public $idSubscriptionPlanPaypal;

    public function __construct()
    {
        $this->clientId = $_ENV['PAYPAL_CLIENT_ID'];
        $this->secret = $_ENV['PAYPAL_SECRET'];
    }

    /**
     * Permet de recupérer le l'authentification Bearer token sur PayPal
     */
    public function getToken()
    {        
        $clientId = $_ENV['PAYPAL_CLIENT_ID'];
        $secret = $_ENV['PAYPAL_SECRET'];

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.sandbox.paypal.com/v1/oauth2/token');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_USERPWD, $clientId . ':' . $secret);

        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Accept-Language: en_US';
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);

        // dd($result);
        if(empty($result))die("Error: No response.");
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }

        curl_close($ch);
        return json_decode($result, true)['access_token'];  
    }


    /**
     * Permet de recupérer tous les plans d'abonnement dans le produit PROD-30J4697439268140M (bio)
     *
     * @param string $productId
     */
    public function getAllSubscriptionPlanInProduct(string $productId = 'PROD-30J4697439268140M'){
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans?page=1&product_id='.$productId);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        return $response['plans'];
    }


    /**
     * Permer de recupérer tous les produits catalogues dans PayPal 
     */
    public function getAllProducts()
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/catalogs/products?page=1&total_required=true');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        return $response['products'];
    }

    /**
     * Permet de créer un produit afin de le relier par un plan d'abonnement
     *
     * @param string $name
     * @param string $description
     */
    public function createProduct($name, $description)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api.sandbox.paypal.com/v1/catalogs/products');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"name\" : $name ,\n\"description\": $description\n}");

        $headers = array();
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        return json_decode($result, true);  
    }

    /**
     * Permet de créer un plan d'abonnement.
     * Mais aussi de recupérer/renvoyer le idSubscriptionPlanPaypal
     * 
     * NB : le type du price doit être en string
     *
     * @param string $planName
     * @param string $planDescription
     * @param integer $durationMonth
     * @param string $price
     */
    public function createSubscriptionPlan(string $productId, string $planName, string $planDescription, string $interval_unit, int $durationMonth, string $price)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{
            \"product_id\": \"$productId\",      
            \"name\": \"$planName\",      
            \"description\": \"$planDescription\",      
            \"billing_cycles\": [        
                {            
                    \"frequency\": {                
                        \"interval_unit\": \"$interval_unit\",                
                        \"interval_count\": 1            
                    },           
                    \"tenure_type\": \"REGULAR\",            
                    \"sequence\": 1,            
                    \"total_cycles\": $durationMonth,            
                    \"pricing_scheme\": {                
                        \"fixed_price\": {                    
                            \"value\": \"$price\",                    
                            \"currency_code\": \"EUR\"                
                        }            
                    }        
                }      
            ],      
            \"payment_preferences\": {        
                \"auto_bill_outstanding\": true,        
                \"setup_fee_failure_action\": \"CONTINUE\",        
                \"payment_failure_threshold\": 3      
            }    
        }");

        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        $headers[] = 'Prefer: return=representation';
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);

        $this->idSubscriptionPlanPaypal =  $response['id'];
        return $response;
    }


    
    /**
     * Permet de modifier un plan d'abonnement
     * NB : le type du price doit être en string
     *
     * @param string $planBillingId
     * @param string $planName
     * @param string $planDescription
     * @param integer $durationMonth
     * @param string $price
     */
    public function editSubscriptionPlan(string $planSubscriptionId, string $planName, string $planDescription)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$planSubscriptionId);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');
        curl_setopt($ch, CURLOPT_POSTFIELDS, "[
            {
                \"path\": \"/name\",
                \"value\": \"$planName\",
                \"op\": \"replace\"
            },
            {
                \"path\": \"/description\",
                \"value\": \"$planDescription\",
                \"op\": \"replace\"
            }
        ]");


        $headers = array();
        $headers[] = 'Accept: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        $headers[] = 'Prefer: return=representation';
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        return $response;
    }


    /**
     * Permet de désactiver un abonnement
     *
     * @param string $planSubscriptionId
     */
    public function deactiveSubscriptionPlan(string $planSubscriptionId)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api-m.sandbox.paypal.com/v1/billing/plans/$planSubscriptionId/deactivate");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        
        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);


        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        return $response;
    }


    /**
     * Permet d'activer un abonnement
     *
     * @param string $planSubscriptionId
     */
    public function activeSubscriptionPlan(string $planSubscriptionId)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "https://api-m.sandbox.paypal.com/v1/billing/plans/$planSubscriptionId/activate");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        return $response;
    }



    /**
     * Permet de supprimer un plan d'abonnement
     * see : https://developer.paypal.com/api/subscriptions/v1/
     *
     * @param string $productId
     */
    public function deleteSubscriptionPlan(string $planIdPaypal){
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$planIdPaypal);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PATCH');

        // curl_setopt($ch, CURLOPT_POSTFIELDS, "[\n  {\n    \"op\": \"remove\",\n       }\n]");




        // curl_setopt($ch, CURLOPT_POSTFIELDS, "[\n  {\n    \"op\": \"remove\",\n    \"path\": \"/payment_preferences/payment_failure_threshold\"\n  }\n]");




        // curl_setopt($ch, CURLOPT_POSTFIELDS, "[\n  {\n    \"value\": {\n        \"state\": \"DELETED\"\n     },\n    \"op\": \"replace\",\n    \"path\": \"/payment_preferences/payment_failure_threshold\"\n  }\n]");

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response =  json_decode($result, true);
        dd($response);
        return $response;
    }

    public function getCurrentTime()
    {
        return date('Y-m-d\\TH:i:s\\Z', time());
    }

    public function pushRequestID($id)
    {
        // push $id to your database and relate it to your customer
        
        //paypal_agreement_requests
        // customer_id VARCHAR(16), agreement_id VARCHAR(14), created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    }

    public function getAprovalURL($planid)
    {
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);

        $time = $this->getCurrentTime();

        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n      \"plan_id\": $planid,\n      \"start_time\": $time,\n      \"application_context\": {\n        \"brand_name\": \"example company\",\n        \"locale\": \"fr-FR\",\n        \"shipping_preference\": \"SET_PROVIDED_ADDRESS\",\n        \"user_action\": \"SUBSCRIBE_NOW\",\n        \"payment_method\": {\n          \"payer_selected\": \"PAYPAL\",\n          \"payee_preferred\": \"IMMEDIATE_PAYMENT_REQUIRED\"\n        },\n        \"return_url\": \"https://example.com/returnUrl\",\n        \"cancel_url\": \"https://example.com/cancelUrl\"\n      }\n    }");

        $headers = array();
        $headers[] = 'Accept: application/json';
        // $headers[] = 'Authorization: _ENV["Bearer .this->getToken()"];
        $headers[] = 'Authorization: _ENV["Bearer .this->getToken()"]';
        $headers[] = 'Prefer: return=representation';
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            throw new Exception( curl_error($ch), true);
        }
        curl_close($ch);
        $response = json_decode($result, true);
        $this->pushRequestID($response->id);
        return $response->link[0]->href;

    }

    public function customerIdFromRequestId($id)
    {
       //SELECT customer_id FROM paypal_agreement_requests WHERE agreement_id=:id;
       // :id => $id;
       // return $data->customer_id;
    }

    public function getAgreement($id)
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/payments/billing-agreements/'.$id);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->getToken();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        return json_decode($result, true);

    }

    /*** ORIGINAL */
    // public function processBody($body = file_get_contents('php://input'))
    // {
    //     $agreementId = $body->ressource->id;

    //     $agreement = $this->getAgreement($id);
    //     $status = $agreement->status;



    //     if ($status == 'ACTIVE') {
    //         $customer = new Customer();
    //         $customer = $customer->fromId($this->customerIdFromRequestId());
    //         $customer->setSubscribed(true);
    //     } else if($status == 'ACTIVE') {
    //         $customer->setSubscribed(true);
    //     } else{
    //         $customer->setSubscribed(false);
    //         $customer->sendNotification("your plan subscription status its ".$status.", please, renew it by clicking here: ".$agreement->links[1]->href." or cancel it here: ".$agreement->links[0]->href);
    //     }
    // }

    public function processBody($id)
    {
        $body = file_get_contents('php://input');
        $agreementId = $body->ressource->id;

        $agreement = $this->getAgreement($id);
        $status = $agreement->status;



        if ($status == 'ACTIVE') {
            $customer = new Customer();
            $customer = $customer->fromId($this->customerIdFromRequestId($id));
            $customer->setSubscribed(true);
        } else if($status == 'ACTIVE') {
            $customer->setSubscribed(true);
        } else{
            $customer->setSubscribed(false);
            $customer->sendNotification("your plan subscription status its ".$status.", please, renew it by clicking here: ".$agreement->links[1]->href." or cancel it here: ".$agreement->links[0]->href);
        }
    }

/**
    ---------------------REDIRECT TO APPROVE------------------------
    $paypalAPI = new Paypal();
    $agreementURL = $paypalAPI->getAprovalURL();
    header("Location:".$agreementURL);

    ---------------------WEBHOOK RESPONSE ENDPOINT------------------------
    $paypalAPI = new Paypal();
    $paypalAPI->processBody(file_get_contents('php://input));
 */
}
